Stored proc

1. 

DELIMITER $$

USE `pse_monitor_pmorcilladev`$$

DROP PROCEDURE IF EXISTS `sp_aggregate_per_minute`$$

CREATE DEFINER=`pmorcilladev`@`%` PROCEDURE `sp_aggregate_per_minute`(
	IN var_symbol VARCHAR(255),
	IN var_price DECIMAL(16, 4),
	IN var_asOf DATETIME,
	IN var_percentChange DECIMAL(8, 4),
	IN var_volume INT(11),
	IN rawRecordId INT(11)
)
BEGIN
	SET @currentDate = (SELECT DATE_FORMAT(var_asOf, '%Y-%m-%d'));
	SET @companyId = (SELECT id FROM companies WHERE symbol = var_symbol);
	IF ((SELECT FOUND_ROWS()) > 0) THEN
		SET @price = (SELECT `price` FROM aggregate_per_minute WHERE companyId = @companyId AND DATE_FORMAT(asOf, '%Y-%m-%d') = @currentDate ORDER BY id DESC LIMIT 1);
		IF ((SELECT FOUND_ROWS()) <= 0) THEN
			SET @price = 0.00;
		END IF;
		IF (var_price <> @price) THEN
			INSERT INTO aggregate_per_minute(companyId, price, asOf, percentChange, volume, created_at)
				VALUES(@companyId, var_price, var_asOf, var_percentChange, var_volume, NOW());
			-- tag as materialized
			IF ((SELECT ROW_COUNT()) = 1) THEN
				UPDATE raw_records SET materialized = 1 WHERE id = rawRecordId;
			END IF;
		END IF;
	END IF;
END$$

DELIMITER ;

2.

DELIMITER $$

USE `pse_monitor_pmorcilladev`$$

DROP PROCEDURE IF EXISTS `sp_materialize_per_company_daily`$$

CREATE DEFINER=`pmorcilladev`@`%` PROCEDURE `sp_materialize_per_company_daily`(
	IN companyId INT(11),
	IN openPrice DECIMAL(16, 4),
	IN highPrice DECIMAL(16, 4),
	IN lowPrice DECIMAL(16, 4),
	IN closePrice DECIMAL(16, 4),
	IN tsOpen DATETIME,
	IN tsHigh DATETIME,
	IN tsLow DATETIME,
	IN tsClose DATETIME,
	IN asOf DATE
    )
BEGIN
	INSERT INTO materialize_per_company_daily(companyId, openPrice, highPrice, lowPrice, closePrice, tsOpen, tsHigh, tsLow, tsClose, asOf, created_at)
		VALUES(companyId, openPrice, highPrice, lowPrice, closePrice, tsOpen, tsHigh, tsLow, tsClose, asOf, NOW())
		ON DUPLICATE KEY UPDATE openPrice = openPrice, highPrice = highPrice, lowPrice = lowPrice, closePrice = closePrice, tsOpen = tsOpen, tsHigh = tsHigh, tsLow = tsLow, tsClose = tsClose;
END$$

DELIMITER ;

3.

DELIMITER $$

USE `pse_screener_pmorcilladev`$$

DROP PROCEDURE IF EXISTS `sp_perform_eod`$$

CREATE DEFINER=`pmorcilladev`@`%` PROCEDURE `sp_perform_eod`()
BEGIN
	SET @disabledEOD = (SELECT disable_eod FROM system_settings WHERE id = 1);
	IF (@disabledEOD = 0) THEN
		SET @unmaterializedDate = (SELECT DATE_FORMAT(asOf, '%Y-%m-%d') AS asOf FROM aggregate_per_minute WHERE materialized IS NULL OR materialized = 0 GROUP BY asOf ORDER BY asOf LIMIT 1);
		IF ((SELECT FOUND_ROWS()) <= 0 ) THEN
			SET @last_eod = (SELECT DATE_FORMAT(MAX(asOf), '%Y-%m-%d') FROM aggregate_per_minute WHERE materialized IS NOT NULL OR materialized = 1);
			IF ((SELECT FOUND_ROWS()) <= 0) THEN
				-- if all are materialized already
				UPDATE system_settings SET last_eod = @last_eod, last_exec_eod = NOW();
			END IF;
		END IF;
	END IF;
END$$

DELIMITER ;